---
title: "FP/RH Commodity Funding Gap Analysis"
subtitle: " February 2024"
author: ""
format: 
  dashboard:
    orientation: columns
editor: visual
execute: 
  echo: false # dont include code , override in sections as needed.
  output: false # dont include output, override in sections as needed.
  warning: false # dont include warnings
params: 
  time_period: !expr c("2021-1","2021-2","2021-3","2021-4","2022-1","2022-2","2022-3","2022-4","2023-1","2023-2","2023-3","2023-4","2024-1","2024-2","2024-3","2024-4","2025-1") 
  next_4quarters: !expr c("2024-2","2024-3","2024-4","2025-1") 
  import_date: "Feb 2024"
---

```{r purpose_version}
# Purpose: Wrangling data from funding status per supply plan in the GFPVAN 
#           for quarterly commodity funding analysis
# Version: Feb 2024  Build off the gap_fundingstatuspersp.R script
```

```{r initial_setup}

# load packages ------------------------------------------------
pacman::p_load("tidyverse",
               "rio",      # for import/export
               "janitor",  # for data cleaning
               "here",     # for relative file paths
               "ggplot2",
               "RColorBrewer",
               "gt",
               "ggiraph",
               "patchwork" # for 2 plots side by side
            )


# For exploring character or factor columns, it is useful to have a see_distinct function -------------------------------------------------------------
see_distinct <- function(df, var){
  df |> 
    distinct({{ var }}) |> 
    arrange({{ var }}) |> 
    pull()
}
```

```{r importdata_supplyplan}

supplyplan_raw <- import(here("data/raw_data", "funding_status_per_sp_240207.xlsx"),
                  na = c("", " ","NA"),
                  )

importdate_pds <- "Feb 2024"

#TO DO check why using import results in "" not being read as NAs and warnings
```

```{r datawrangling_supplyplan1}

supplyplan_raw |> glimpse()

# clean names
supplyplan <- supplyplan_raw |> 
  clean_names() |>  
  glimpse() 

supplyplan <- supplyplan |>  
  # rename columns
  rename(   
    # NEW       = OLD
    country     = country_name,
    supply_plan = supply_plan_description) |> 
  # remove the total qty column
  select(!total_qty_funded_firm_supply_plan_value) |> 
  glimpse()

# pivot longer to make supplyplan tidy

# funding status needs to be a column, not part of a column name

supplyplan <- supplyplan |> 
  # rename the columns that need to be gathered
  # quantity columns need to be renamed to start with quantity_
  # value columns need to start with value_
  # so do it first for value columns as they end with _value_supply_plan
  # then do it for quantity columns as they end with _supply_plan
    rename_with( ~ paste0("value_", str_remove(.x, "_value_supply_plan")) ,
              .cols = ends_with("_value_supply_plan")) |>
    rename_with( ~ paste0("quantity_", str_remove(.x, "_supply_plan")) ,
              .cols = ends_with("_supply_plan")) 

supplyplan <- supplyplan |> 
  # then pivot_longer to gather
  pivot_longer(
    cols = starts_with("quantity_") | starts_with("value_"),
    names_to = c(".value", "funding_status"),
    names_sep = "_",
    values_drop_na = TRUE ) |> 
  glimpse()

# Analyzing categorical columns

skimr::skim(supplyplan)

# basic categorical check
see_distinct(supplyplan, country) # note there is -
see_distinct(supplyplan, supply_plan)
see_distinct(supplyplan, l3_method)
see_distinct(supplyplan, l5_product)
see_distinct(supplyplan, date)
see_distinct(supplyplan, collab_review_status) # note per Maggie - is used for a product that is no longer managed
see_distinct(supplyplan, last_updated_in_the_van)
see_distinct(supplyplan, supplier)
see_distinct(supplyplan, funding_source)
see_distinct(supplyplan, funding_status)

# clean up country - DRC is too long (note: check that the only Congo for which data exists is DRC)
supplyplan <- supplyplan |> 
  mutate(country = case_when(str_detect(country, "Congo") ~ "DRC",
                             TRUE ~ country) )

# Check if there are unfunded lines that have a source.
supplyplan |>
  filter(funding_status == "unfunded",
         collab_review_status %in% c("Ready To Use Approved",
                                     "Ready To Use Estimate",
                                      "In Review"),
         !funding_source  %in% c("-","TBD"),
         value != 0.0) |>
  select(country, funding_source, funding_status, value, date) |>
  distinct(country, funding_source, funding_status, value, date) |> 
  gt()

#TODO There are 9 lines that are unfunded but have a funding source. INVESTIGATE

# clean up funding source
supplyplan <- supplyplan |>
  mutate(funding_source = str_replace(
    string = funding_source,
    pattern = "To be determined|To Be Determined|ToBeDetermined|None Selected|Unknown",
    replacement = "TBD"
  ))

#not including this in the previous TBD replacement as that would result in all - being replaced with TBD even if they are a part of a name
supplyplan <- supplyplan |> 
  mutate(funding_source = case_when((funding_source == "-") ~ "TBD", 
                                     TRUE ~ funding_source))

#TODO Check funding status for funding source TBD

see_distinct(supplyplan, funding_source)

#make funding source a factor and set levels to determine the order of appearance in charts
supplyplan <- supplyplan |>
  mutate(funding_source_group =  case_when
         (funding_source == "USAID" ~ "USAID",
          funding_source == "UNFPA C.O. Co-financing agreement" ~ "UNFPA C.O. Co-financing agreement",
          funding_source == "UNFPA" ~ "UNFPA",
          funding_source == "Government" ~ "Government",
          funding_source == "TBD" ~ "TBD",
          TRUE ~ "other"),
         funding_source_group = factor(funding_source_group,
                                       levels = c("TBD",
                                                  "other",
                                                  "Government",
                                                  "UNFPA",
                                                  "UNFPA C.O. Co-financing agreement",
                                                  "USAID"
                                                )))

# Changing field "date" to a date
supplyplan <- supplyplan |> 
  mutate(date_required = lubridate::my(date),
         year_quarter_required = str_c(year(date_required),
                                       "-",
                                       quarter(date_required)))

supplyplan |> 
  distinct(year_quarter_required, date_required,date) |> 
  arrange(year_quarter_required, date_required,date) |> 
  gt()
```

```{r datawrangling_supplyplan2}
# get a pivot of L5 and L3 from supply plan
productpivot <- supplyplan |>
  distinct(l3_method, l5_product)

# Defining PRH country categories 
tier1 <- c("Afghanistan",
               "Angola",
               "Benin",
               "Burkina Faso",
               "Burundi",
               "Cameroon",
               "Côte d’Ivoire", 
               "Cote d'Ivoire",
              "DRC", "Congo (the Democratic Republic of the)",
              "Ethiopia", 
              "Ghana", 
              "Haiti", 
              "Guinea",
              "Kenya", 
              "Liberia", 
              "Madagascar", 
              "Mali", 
              "Mozambique",
              "Niger",
              "Nigeria", 
              "Pakistan",
              "Philippines", 
              "Senegal", 
              "South Sudan", 
              "Tanzania", 
              "Togo",
              "Uganda",
              "Yemen",
              "Zambia")

tier2 <- c("Cambodia", 
          "Egypt",  
          "Guatemala", 
          "Jordan", 
          "Malawi", 
          "Nepal", 
          "Rwanda",
          "Sierra Leone",
          "Timor Leste",
          "Zimbabwe")

tier3 <- c("Bangladesh",
           "India")

supplyplan <- supplyplan |>
  mutate(prh_countrygroup = 
           case_when(country %in% tier1 ~ "High Need",
                     country %in% tier2 ~ "Strategic Support",
                    country %in% tier3 ~ "Strategic Transition",
                      TRUE ~ "other"))

supplyplan |>
  distinct(prh_countrygroup, country) |> 
  arrange(prh_countrygroup, country) |> 
  gt()
# Data Wrangling - Analyzing numeric and date columns 

supplyplan |>
  select_if(is.numeric) |>
  skimr::skim()

# Exporting data 

export(supplyplan, 
       file = here("data/wrangled_data", "supplyplanwrangled.csv"))
```

```{r dataviz_setup_mytheme}

# Setting the theme for visualization

color_title <- "#202020" #  "#202020"
color_caption <- "#909090"  # "#000000"
color_plot_text <- color_plot_text <- "#505050" # "#000000"
      
line <- 10
    
mytheme <- function() {
      theme_classic() +
        theme(plot.title = element_text(size = 14,
                                        color = color_title,
                                        face = "bold",
                                        margin = margin(b = line),
                                        hjust = 0),
              
              plot.title.position = "plot", #Move plot.title to the left
              
              plot.subtitle = element_text(size = 12,
                                           face = "bold",
                                           color = color_plot_text,
                                           hjust = 0), 
              
              plot.caption = element_text(size = 10,
                                          color = color_caption,
                                          face = "italic",
                                          margin = margin(t = line),
                                          hjust = 0, # left-align caption
                                          vjust = 2),
              
              plot.caption.position = "plot",
              
              plot.margin = ggplot2::margin(15, 15, 10, 15), #top, right, bottom, left
              
              axis.title = element_text(size = 8, # adjusts both axes titles
                                        color = color_caption,
                                        vjust = 2),          
              axis.text.x = element_text(size = 8,
                                      #   angle = 60, 
                                      #   hjust = 1,
                                         color = color_plot_text),
              axis.text.y = element_text(size = 8,
                                         color = color_plot_text),
              
              # axis.ticks = element_blank(),
              
              # axis.line = element_blank(),
              
         
              
              # text =  element_text(color = color_plot_text,
              # this will change all text size (except geom_text)
              #                          size = 14,
              #                          hjust = 0.5)
        )
      
}

#create color mapping

scale_fill_custom <- scale_fill_manual(
 values = c(
    "TBD" = "#f6e8c3", 
    "other" = "#d8b365", 
    "Government" = "#8c510a", 
    "UNFPA" = "#c7eae5", 
    "UNFPA C.O. Co-financing agreement" = "#5ab4ac", 
    "USAID" = "#01665e" 
  ))

```

```{r dataviz_setup_overallvalue}

gg_overall <- function(countrygroup){
supplyplan |>
  filter(prh_countrygroup == countrygroup,
         collab_review_status %in% c( "In Review",
                                      "Ready to Use Approved",
                                      "Ready to Use Estimate"
                                      ),
         year_quarter_required %in% params$time_period
         ) |>
  group_by(year_quarter_required, funding_source_group) |> 
  summarize(value = sum(value)) |> 
  ggplot(aes(
    x = year_quarter_required,
    y = value,
    fill = funding_source_group
  )) +
  geom_col()+
  #  geom_bar_interactive(aes(tooltip = (percent*100)), # tooltip for ggiraph
  labs(
    x = "",
    y = "FP/RH Commodity Financing Requirement"
  ) +
  mytheme() +
  scale_fill_custom +
  theme(axis.text.x = element_text(
        hjust = 1,
        angle = 60
        )) +
  theme(legend.position = "right",
        legend.title = element_blank(),
        legend.text = element_text(size = 8,
                                   color = color_plot_text)
                                   ) +
  scale_y_continuous(
    labels = scales::label_dollar(scale_cut = scales::cut_short_scale())) +
  geom_text(aes(
    label = ifelse(
      ((year_quarter_required %in% params$time_period) &
      (funding_source_group == "TBD")&
        value != 0),
      scales::label_dollar(accuracy=1.,
        scale_cut = scales::cut_short_scale())(value),
      "")
    ),
    position = position_stack(vjust = 0.5),
    size = 2)

# girafe(
#   ggobj = gg_supplyplan_grouped,
#   options = list(opts_sizing(rescale = FALSE),
#                  opts_tooltip(zindex = 9999),
#                  opts_hover(css = ''),
#                  opts_hover_inv(css = 'opacity:0.2;'))
#   )
}

```

```{r dataviz_setup_numberprograms}

gg_numberprograms <- function(countrygroup){
  
supplyplan |>
  filter(
    prh_countrygroup == countrygroup,
    collab_review_status %in% c(
      "In Review",
      "Ready to Use Approved",
      "Ready to Use Estimate"
    ),
    year_quarter_required %in% params$time_period
  ) |>
  group_by(year_quarter_required) |>
  summarise(numberprograms = n_distinct(str_c(country, " ", supply_plan))) |> 
  gt()|>
    cols_label(
      year_quarter_required = "Calendar Year - Quarter",
      numberprograms = "Number of Programs"
    ) 
}

```

```{r dataviz_setup_countryvalue}


gg_country_value <- function(countrygroup){
  supplyplan |>
  filter(
    prh_countrygroup == countrygroup,
    collab_review_status %in% c(
      "In Review",
      "Ready to Use Approved",
      "Ready to Use Estimate"
    ),
    year_quarter_required %in% params$next_4quarters
  ) |>
  ggplot(aes(
    x = fct_reorder(country, value, .fun = sum, .desc = FALSE), 
    y = value,
    fill = funding_source_group
  )) +
  #  geom_bar_interactive(aes(tooltip = (percent*100)), # tooltip for ggiraph
  geom_col() +
  labs(
    title = "Requirements for the next four quarters",
    x = "",
    y = ""
  ) +
  mytheme() +
  scale_fill_custom +
  theme(axis.text.x = element_text(
    hjust = 1,
    angle = 60
  )) +
  theme(legend.position = "top",
        legend.title = element_blank(),
        legend.text = element_text(size = 8,
                                    color = color_plot_text)
        )+
  scale_y_continuous(labels = scales::label_dollar(scale_cut = scales::cut_short_scale())) +
  #  geom_text(aes(label = ifelse(year_quarter_required %in% params$time_period,
  #                               str_c("$",value),
  #                               "")),
  #            position = position_fill(vjust=0.5),
  #            colour="white",
  #            size = 2)
  coord_flip()

# girafe(
#   ggobj = gg_supplyplan,
#   options = list(opts_sizing(rescale = FALSE),
#                  opts_tooltip(zindex = 9999),
#                  opts_hover(css = ''),
#                  opts_hover_inv(css = 'opacity:0.2;'))
#   )
}

```

```{r dataviz_setup_countrypercent}
#| output: true

# can use stat=count in geom_bar (with pds and no y in aes) to get a percent stacked chart, however in order to get the percentages to use in text, we need to calculate them first and then use stat= identity iwth a y in aes.

gg_country_percent <- function(countrygroup){
  
supplyplan_grouped <- supplyplan |> 
  filter(prh_countrygroup == countrygroup,
         collab_review_status %in% c("In Review",
                                     "Ready to Use Approved",
                                     "Ready to Use Estimate"),
         year_quarter_required %in% params$next_4quarters) |> 
  group_by(country, funding_source_group) |> 
  summarise(value = sum(value)) |> 
  ungroup()

#gg_supplyplan_grouped <-
supplyplan_grouped |> 
   ggplot(aes(x = fct_reorder(country, 
                              value,
                              .fun = sum,
                              .desc = FALSE),
             y = value,
             fill = funding_source_group)) +
#  geom_bar_interactive(aes(tooltip = (percent*100)), # tooltip for ggiraph
  geom_bar(stat = "identity", position = "fill") +
  scale_fill_custom + 
  labs(
    x = "",
    y = ""
  ) +
  mytheme() +
  theme(axis.text.x = element_text(hjust = 1,
                                   angle = 60))+
  
  theme(legend.position = "none"
      # legend.title = element_blank(),
      #        legend.text = element_text(size = 8,
      #                                   color = color_plot_text)
    )+
  
  scale_y_continuous(labels = scales::percent) +
#  geom_text(aes(label = ifelse(year_quarter_required %in% params$time_period,
#                               str_c(percent*100,"%"),
#                               "")),
#            position = position_fill(vjust=0.5),
#            colour="white", 
#            size = 2)
  coord_flip()

# girafe(
#   ggobj = gg_supplyplan_grouped,
#   options = list(opts_sizing(rescale = FALSE),
#                  opts_tooltip(zindex = 9999),
#                  opts_hover(css = ''),
#                  opts_hover_inv(css = 'opacity:0.2;'))
#   )
}
```

```{r table_setup_supplyplan}

table_supplyplan <- function(countrygroup) {
  supplyplan |>
    filter(
      prh_countrygroup == countrygroup,
      collab_review_status %in% c(
        "In Review",
        "Ready to Use Approved",
        "Ready to Use Estimate"
      ),
      year_quarter_required %in% params$next_4quarters
    ) |>
    group_by(country, supply_plan, last_updated_in_the_van) |>
    summarise(total_requirement = sum(value)) |>
    ungroup() |>
    gt() |>
    tab_header(
      title = "Total commodity funding requirements in the supply plan for the next 4 quarters"
    ) |>
    cols_label(
      country = "Country",
      supply_plan = "Program",
      last_updated_in_the_van = "Date updated in the GFPVAN",
      total_requirement = "Requirement"
    ) |>
    fmt_number(
      columns = "total_requirement",
      decimals = 0,
      pattern = "${x}",
      suffixing = TRUE
    ) |>
    sub_missing(missing_text = "-") |>
    opt_stylize(style = 6, color = "blue")
}
```

#  {.sidebar}

-   Data source: Supply plans downloaded from the GFPVAN on `{r} params$import_date`

-   Requirements include commodity costs and shipping costs at 20% of commodity value.

-   Requirements are per the countries' supply plans and include the safety stock inventory requirements at the central warehouse.

-   Different quarters may include a different set of countries and programs

-   UNFPA's 1st tranche of funding is expected in March and is not yet reflected in these charts. Typically there is a 2nd and 3rd tranche in July and December.

-   USAID OP funds have not been approved yet for many countries and are not fully reflected in these charts.

# High Need

## Col1 {.tabset}

```{r firsttab_highneed_overallvalue}
#| output: true
#| title: Overall

gg_overall("High Need") 
```

```{r tab_highneed_numberprograms}
#| output: true
#| title: Number of programs

gg_numberprograms("High Need")
```

```{r secondtab_highneed_countryvalue}
#| output: true
#| title: By Country

gg_country_value("High Need") +
  gg_country_percent("High Need")

```

```{r thirdtab_highneed_supplyplandetails}
#| output: true
#| title: Supply Plan Details

table_supplyplan("High Need")

```

# Strategic Support

## Col1 {.tabset}

```{r firsttab_strategicsupport_overallvalue}
#| output: true
#| title: Overall

gg_overall("Strategic Support")
```

```{r secondtab_strategicsupport_countryvalue}
#| output: true
#| title: By Country

gg_country_value("Strategic Support")
```

```{r thirdtab_strategicsupport_supplyplandetails}
#| output: true
#| title: Supply Plan Details

table_supplyplan("Strategic Support")
```

# Strategic Transition

## Col1 {.tabset}

```{r firsttab_strategictransition_overallvalue}
#| output: true
#| title: Overall

gg_overall("Strategic Transition")

```

```{r secondtab_strategictransition_countryvalue}
#| output: true
#| title: By Country

gg_country_value("Strategic Transition")
```

```{r thirdtab_strategictransition_supplyplandetails}
#| output: true
#| title: Supply Plan Details

table_supplyplan("Strategic Transition")
```

# Other Countries

## Col1 {.tabset}

```{r firsttab_other_overallvalue}
#| output: true
#| title: Overall

gg_overall("other")

```

```{r secondtab_other_countryvalue}
#| output: true
#| title: By Country

gg_country_value("other")
```

```{r thirdtab_other_supplyplandetails}
#| output: true
#| title: Supply Plan Details

table_supplyplan("other")
```

# x

```{r dataviz_highneed_percent}
#| output: true
#| eval: false

#TODO something is wrong with percentage calculation

# time_period <- c("2024-2","2024-3","2024-4","2025-1") 

# can use stat=count in geom_bar (with pds and no y in aes) to get a percent stacked chart, however in order to get the percentages to use in text, we need to calculate them first and then use stat= identity iwth a y in aes.

supplyplan_grouped <- supplyplan |> 
  filter(prh_countrygroup == "High Need",
         collab_review_status %in% c("In Review",
                                     "Ready to Use Approved",
                                     "Ready to Use Estimate"),
         year_quarter_required %in% params$time_period) |> 
  group_by(year_quarter_required, funding_source_group) |> 
  dplyr::tally() |> 
  dplyr::mutate(percent= round(n/sum(n),2)) 

# doing a count instead of group_by/tally will not change n but will change sum(n)-- with a count sum(n) is sum of n across all groups, with group_by/tally sum(n) is sum of n in the immediate higher group

#gg_supplyplan_grouped <-
supplyplan_grouped |> 
   ggplot(aes(x = year_quarter_required,
             y = n,
             fill = funding_source_group)) +
#  geom_bar_interactive(aes(tooltip = (percent*100)), # tooltip for ggiraph
  geom_bar(
                        stat = "identity",
                       position = "fill") +
  custom_col_scale + 
  labs(
    x = "",
    y = "FP/RH Commodity Value (%)"
  ) +
  mytheme() +
  theme(axis.text.x = element_text(hjust = 1,
                                   angle = 60))+
  scale_y_continuous(labels = scales::percent) 
#  geom_text(aes(label = ifelse(year_quarter_required %in% params$time_period,
#                               str_c(percent*100,"%"),
#                               "")),
#            position = position_fill(vjust=0.5),
#            colour="white", 
#            size = 2)

# girafe(
#   ggobj = gg_supplyplan_grouped,
#   options = list(opts_sizing(rescale = FALSE),
#                  opts_tooltip(zindex = 9999),
#                  opts_hover(css = ''),
#                  opts_hover_inv(css = 'opacity:0.2;'))
#   )
```
